{
    "docs": [
        {
            "location": "/",
            "text": "User Guide\n\ue157\n\n\nGetting Started\n\ue157\n\n\nFind cursor provides only one command, and that command makes the cursors highly visible. It works best when bound to a shortcut.  Simply setup a \nkeymap\n and you are ready to go.  Though if you prefer, you can add commands in the command palette, or menus.\n\n\nBy default, FindCursor defines two commands in the command palette: \nFind Cursor\n and \nFind Cursor (Reverse)\n.  Both of the default command palette commands employ panning mode as discussed in the \ncommand section of the documentation\n. Panning mode is used as it is better suited to the command palette, while iterative is better suited for keymaps (the recommended way to use FindCursor).\n\n\nCommand\n\ue157\n\n\n\n\nfind_cursor\n\n\n\n\nWhen the command is first invoked, all cursors will turn to block cursors and blink making them highly visible.  Subsequent invocations (if performed before timeout \u2013 i.e. while the cursors are still highlighted) will cycle through the cursors in the view.  The focus modes are \niterative mode\n (the default) and \npan mode\n.\n\n\n\n\n\n\nIterative Mode\n: Iterative mode is the default.  This will cycle through each cursor centering it in the view. Iteration only occurs when the command is ran an additional time while the cursors are still in their highlighted state.  If run after they have reverted to their original state, FindCursor will just show the next off screen cursor.  For this reason, iterative mode doesn't work too well from the command palette as the command is slow to activate from the command line; iterative mode is \nnot\n provided by default in the command palette for the these reasons.\n\n\n\n\n\n\nPan Mode\n: Pan mode, or panning mode, will pan through the cursors in your view.  While iterative mode will focus each cursor individually while the in the high visibility state, pan mode will just jump to the next group of offscreen cursors.\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreverse\n\n\nboolean\n\n\nControls the direction of cursor focusing when either iterating or panning through cursors.\n\n\n\n\n\n\npan\n\n\nboolean\n\n\nControls whether the command will run in pan mode or iterative mode.\n\n\n\n\n\n\n\n\nScreencast demonstrating the differences of pan vs iterative:\n\n\n\n\n\n\n\n\nDefining Keymaps\n\ue157\n\n\nSetting up commands is basically the same for either pan or iterative commands.  The command can be bound in a forward or reverse direction and in iterative or pan mode.  It is usually useful to bind both forward and reverse variants for easier cursor navigation.\n\n\n    \n//////////////////////////////////\n\n    \n// Find Cursor: Iterative Find\n\n    \n//////////////////////////////////\n\n    \n{\n\n        \n\"keys\"\n:\n \n[\n\"ctrl+.\"\n],\n\n        \n\"command\"\n:\n \n\"find_cursor\"\n,\n\n        \n\"args\"\n:\n \n{\n\"reverse\"\n:\n \nfalse\n,\n \n\"pan\"\n:\n \nfalse\n}\n\n    \n},\n\n    \n{\n\n        \n\"keys\"\n:\n \n[\n\"ctrl+shift+.\"\n],\n\n        \n\"command\"\n:\n \n\"find_cursor\"\n,\n\n        \n\"args\"\n:\n \n{\n\"reverse\"\n:\n \ntrue\n,\n \n\"pan\"\n:\n \nfalse\n}\n\n    \n}\n\n\n\n\n\n    \n//////////////////////////////////\n\n    \n// Find Cursor: Panning Find\n\n    \n//////////////////////////////////\n\n    \n{\n\n        \n\"keys\"\n:\n \n[\n\"ctrl+.\"\n],\n\n        \n\"command\"\n:\n \n\"find_cursor\"\n,\n\n        \n\"args\"\n:\n \n{\n\"reverse\"\n:\n \nfalse\n,\n \n\"pan\"\n:\n \ntrue\n}\n\n    \n},\n\n    \n{\n\n        \n\"keys\"\n:\n \n[\n\"ctrl+shift+.\"\n],\n\n        \n\"command\"\n:\n \n\"find_cursor\"\n,\n\n        \n\"args\"\n:\n \n{\n\"reverse\"\n:\n \ntrue\n,\n \n\"pan\"\n:\n \ntrue\n}\n\n    \n}\n\n\n\n\n\nSettings\n\ue157\n\n\nThere is currently only one setting that can be used in FindCursor.\n\n\nfind_mode_timeout\n\ue157\n\n\nfind_mode_timeout\n controls how long after each command invocation that navigating through cursors will be allowed.  After the time out is reached, the cursors return to normal mode and the next invocation will only make them highly visible again.\n\n\n    \n// How long before find mode times out\n\n    \n// and cursors return to normal\n\n    \n\"find_mode_timeout\"\n:\n \n3000",
            "title": "User Guide"
        },
        {
            "location": "/#user-guide",
            "text": "",
            "title": "User Guide"
        },
        {
            "location": "/#getting-started",
            "text": "Find cursor provides only one command, and that command makes the cursors highly visible. It works best when bound to a shortcut.  Simply setup a  keymap  and you are ready to go.  Though if you prefer, you can add commands in the command palette, or menus.  By default, FindCursor defines two commands in the command palette:  Find Cursor  and  Find Cursor (Reverse) .  Both of the default command palette commands employ panning mode as discussed in the  command section of the documentation . Panning mode is used as it is better suited to the command palette, while iterative is better suited for keymaps (the recommended way to use FindCursor).",
            "title": "Getting Started"
        },
        {
            "location": "/#command",
            "text": "find_cursor   When the command is first invoked, all cursors will turn to block cursors and blink making them highly visible.  Subsequent invocations (if performed before timeout \u2013 i.e. while the cursors are still highlighted) will cycle through the cursors in the view.  The focus modes are  iterative mode  (the default) and  pan mode .    Iterative Mode : Iterative mode is the default.  This will cycle through each cursor centering it in the view. Iteration only occurs when the command is ran an additional time while the cursors are still in their highlighted state.  If run after they have reverted to their original state, FindCursor will just show the next off screen cursor.  For this reason, iterative mode doesn't work too well from the command palette as the command is slow to activate from the command line; iterative mode is  not  provided by default in the command palette for the these reasons.    Pan Mode : Pan mode, or panning mode, will pan through the cursors in your view.  While iterative mode will focus each cursor individually while the in the high visibility state, pan mode will just jump to the next group of offscreen cursors.       Parameters  Type  Description      reverse  boolean  Controls the direction of cursor focusing when either iterating or panning through cursors.    pan  boolean  Controls whether the command will run in pan mode or iterative mode.     Screencast demonstrating the differences of pan vs iterative:",
            "title": "Command"
        },
        {
            "location": "/#defining-keymaps",
            "text": "Setting up commands is basically the same for either pan or iterative commands.  The command can be bound in a forward or reverse direction and in iterative or pan mode.  It is usually useful to bind both forward and reverse variants for easier cursor navigation.       ////////////////////////////////// \n     // Find Cursor: Iterative Find \n     ////////////////////////////////// \n     { \n         \"keys\" :   [ \"ctrl+.\" ], \n         \"command\" :   \"find_cursor\" , \n         \"args\" :   { \"reverse\" :   false ,   \"pan\" :   false } \n     }, \n     { \n         \"keys\" :   [ \"ctrl+shift+.\" ], \n         \"command\" :   \"find_cursor\" , \n         \"args\" :   { \"reverse\" :   true ,   \"pan\" :   false } \n     }        ////////////////////////////////// \n     // Find Cursor: Panning Find \n     ////////////////////////////////// \n     { \n         \"keys\" :   [ \"ctrl+.\" ], \n         \"command\" :   \"find_cursor\" , \n         \"args\" :   { \"reverse\" :   false ,   \"pan\" :   true } \n     }, \n     { \n         \"keys\" :   [ \"ctrl+shift+.\" ], \n         \"command\" :   \"find_cursor\" , \n         \"args\" :   { \"reverse\" :   true ,   \"pan\" :   true } \n     }",
            "title": "Defining Keymaps"
        },
        {
            "location": "/#settings",
            "text": "There is currently only one setting that can be used in FindCursor.",
            "title": "Settings"
        },
        {
            "location": "/#find_mode_timeout",
            "text": "find_mode_timeout  controls how long after each command invocation that navigating through cursors will be allowed.  After the time out is reached, the cursors return to normal mode and the next invocation will only make them highly visible again.       // How long before find mode times out \n     // and cursors return to normal \n     \"find_mode_timeout\" :   3000",
            "title": "find_mode_timeout"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nThe recommended way to install FindCursor is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nCtrl\n\uff0b\nShift\n\uff0b\nP\n (Win, Linux) or \nCmd\n\uff0b\nShift\n\uff0b\nP\n (macOS) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nFindCursor\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install FindCursor for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone FindCursor and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install FindCursor without package control, here are the steps.  It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nteddy_beer_maniac/sublime-text-dependency-markupsafe\n \u2192 \nmarkupsafe\n\n\nteddy_beer_maniac/sublime-text-dependency-jinja2\n \u2192 \npython-jinja2\n\n\npackagecontrol/pygments\n \u2192 \npygments\n\n\nfacelessuser/sublime-markdown-popups\n \u2192 \nmdpopups\n\n\nfacelessuser/sublime-markdown\n \u2192 \npython-markdown\n\n\n\n\n\n\n\n\nDownload and unpack, or git clone, the latest FindCursor release and unpack as \nFindCursor\n:\n\n\n\n\nfacelessuser/FindCursor\n \u2192 FindCursor\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n>=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \n'sys_path.py'\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n'3'\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n'2'\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\"\"\"\n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can't import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \"\"\"\n\n\n    \nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\"\"\"\n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \"\"\"\n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\"\"\"\n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - 'ver'\n\n\n         - 'plat'\n\n\n         - 'arch'\n\n\n    \"\"\"\n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\n'Packages'\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\n'st\n%s\n'\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \n'all'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \n'all'\n),\n\n        \n'ver'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \n'plat'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n'\n%s\n_\n%s\n'\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \n'arch'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n'\n%s\n_\n%s\n_\n%s\n'\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\"\"\"\n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \"\"\"\n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\n'pygments'\n)\n\n\nadd_dependency\n(\n'markupsafe'\n)\n\n\nadd_dependency\n(\n'python-markdown'\n)\n\n\nadd_dependency\n(\n'python-jinja2'\n)\n\n\nadd_dependency\n(\n'mdpopups'\n)\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FindCursor.git FindCursor\n\n\n\n\n\n\n\n\nRestart Sublime Text.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/installation/#package-control",
            "text": "The recommended way to install FindCursor is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.     Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  Ctrl \uff0b Shift \uff0b P  (Win, Linux) or  Cmd \uff0b Shift \uff0b P  (macOS) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  FindCursor ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!",
            "title": "Package Control"
        },
        {
            "location": "/installation/#manual-installation",
            "text": "Warning  This is not the recommended way to install FindCursor for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone FindCursor and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install FindCursor without package control, here are the steps.  It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   teddy_beer_maniac/sublime-text-dependency-markupsafe  \u2192  markupsafe  teddy_beer_maniac/sublime-text-dependency-jinja2  \u2192  python-jinja2  packagecontrol/pygments  \u2192  pygments  facelessuser/sublime-markdown-popups  \u2192  mdpopups  facelessuser/sublime-markdown  \u2192  python-markdown     Download and unpack, or git clone, the latest FindCursor release and unpack as  FindCursor :   facelessuser/FindCursor  \u2192 FindCursor     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   'nt' : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   >=   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   'sys_path.py' : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u '3'  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u '2'  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n     \"\"\"      Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can't import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning      \"\"\" \n\n     if   os . name   ==   'nt' : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n     \"\"\"      Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file      \"\"\" \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   'nt' : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n     \"\"\"      Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           - 'ver'           - 'plat'           - 'arch'      \"\"\" \n\n     packages_dir   =   os . path . join ( st_dir ,   u 'Packages' ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u 'st %s '   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         'all' :   os . path . join ( dependency_dir ,   'all' ), \n         'ver' :   os . path . join ( dependency_dir ,   ver ), \n         'plat' :   os . path . join ( dependency_dir ,   u ' %s _ %s '   %   ( ver ,   plat )), \n         'arch' :   os . path . join ( dependency_dir ,   u ' %s _ %s _ %s '   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n     \"\"\"      Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list      \"\"\" \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( 'pygments' )  add_dependency ( 'markupsafe' )  add_dependency ( 'python-markdown' )  add_dependency ( 'python-jinja2' )  add_dependency ( 'mdpopups' )     Restart and enjoy.",
            "title": "Manual Installation"
        },
        {
            "location": "/installation/#git-cloning",
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FindCursor.git FindCursor    Restart Sublime Text.",
            "title": "Git Cloning"
        },
        {
            "location": "/contributing/",
            "text": "Contributing & Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime\u00a0Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences->Package Settings->FindCursor->Support Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\n\n\n\n\nPlease describe the change in as much detail as possible so I can understand what is being added or modified.\n\n\n\n\n\n\nIf you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).\n\n\n\n\n\n\nPlease reference and link related open bugs or feature requests in this pull if applicable.\n\n\n\n\n\n\nMake sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.\n\n\n\n\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n (\npytest-dev/pytest\n).  You can install \npytest\n via:\n\n\npip install pytest\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with the following modules:\n\n\n\n\npycqa/flake8\n\n\npycqa/flake8-docstrings\n\n\nebeweber/flake8-mutable\n\n\ngforcada/flake8-builtins\n\n\npycqa/pep8-naming\n\n\n\n\nThese can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install flake8-mutable\npip install flake8-builtins\npip install pep8-naming\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs/mkdocs\n, the \nsquidfunk/mkdocs-material\n, and \nfacelessuser/pymdown-extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#contributing--support",
            "text": "",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#overview",
            "text": "Sublime\u00a0Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.",
            "title": "Overview"
        },
        {
            "location": "/contributing/#bug-reports",
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences->Package Settings->FindCursor->Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.",
            "title": "Bug Reports"
        },
        {
            "location": "/contributing/#reviewing-code",
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.",
            "title": "Reviewing Code"
        },
        {
            "location": "/contributing/#pull-requests",
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.    Please describe the change in as much detail as possible so I can understand what is being added or modified.    If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).    Please reference and link related open bugs or feature requests in this pull if applicable.    Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.    Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/#running-validation-tests",
            "text": "Tip  If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3 must be used to validate the tests.    Unit tests are run with  pytest  ( pytest-dev/pytest ).  You can install  pytest  via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with the following modules:   pycqa/flake8  pycqa/flake8-docstrings  ebeweber/flake8-mutable  gforcada/flake8-builtins  pycqa/pep8-naming   These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install flake8-mutable\npip install flake8-builtins\npip install pep8-naming  Linting is performed with the following command:  flake8 .",
            "title": "Running Validation Tests"
        },
        {
            "location": "/contributing/#documentation-improvements",
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs/mkdocs , the  squidfunk/mkdocs-material , and  facelessuser/pymdown-extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .",
            "title": "Documentation Improvements"
        },
        {
            "location": "/license/",
            "text": "License\n\ue157\n\n\nFindCursor is released under the MIT license.\n\n\nCopyright \u00a9 2014 - 2017 Isaac Muse \nisaacmuse@gmail.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "FindCursor is released under the MIT license.  Copyright \u00a9 2014 - 2017 Isaac Muse  isaacmuse@gmail.com  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE",
            "title": "License"
        }
    ]
}